{"ast":null,"code":"e: string;\nemail;\nstrixport;\nclass UsuarioCadastrarComponent {\n  constructor(client, router) {\n    this.client = client;\n    this.router = router;\n    this.episSelecionados = [];\n    this.episDisponiveis = [];\n  }\n  ngOnInit() {\n    // Busque a lista de EPIS disponíveis\n    this.client.get(\"https://localhost:7144/EpiList/EPI/listar\").subscribe(epis => {\n      this.episDisponiveis = epis;\n      // Inicialize a variável episSelecionados para cada EPI\n      this.episSelecionados = epis.map(epi => ({\n        epiID: Number(epi.epiID),\n        selecionado: false\n      }));\n    });\n  }\n  cadastrar() {\n    // Filtrar os EPIS selecionados\n    const episSelecionadosIDs = this.episSelecionados.filter(epi => epi.selecionado).map(epi => epi.epiID);\n    const usuario = {\n      nome: this.nome,\n      email: this.email,\n      telefone: this.telefone,\n      senha: this.senha,\n      cpf: this.cpf,\n      cargo: this.cargo,\n      episId: episSelecionadosIDs\n    };\n    console.log(usuario);\n    this.client.post('https://localhost:7144/EpiList/Usuario/cadastrar', usuario).subscribe({\n      next: data => {\n        console.log(data);\n        this.router.navigate(['pages/Usuario/listar']);\n      },\n      error: erro => {\n        console.log(erro);\n      }\n    });\n  }\n  toggleEpiSelecionado(epiID) {\n    // Certifique-se de que epiID seja um número\n    const id = epiID ? parseInt(epiID, 10) : undefined;\n    if (id !== undefined) {\n      const index = this.episSelecionados.findIndex(e => e.epiID === id);\n      if (index !== -1) {\n        this.episSelecionados[index].selecionado = !this.episSelecionados[index].selecionado;\n      }\n    }\n  }\n  getEpiSelecionado(epiID) {\n    if (typeof epiID === 'number' || typeof epiID === 'string') {\n      const id = typeof epiID === 'string' ? parseInt(epiID, 10) : epiID;\n      const epi = this.episSelecionados.find(e => e.epiID === id);\n      return epi ? epi.selecionado : false;\n    } else {\n      return false; // Ou outra lógica adequada caso epiID seja undefined\n    }\n  }\n}\n\nexport {};","map":{"version":3,"names":["e","string","email","strixport","UsuarioCadastrarComponent","constructor","client","router","episSelecionados","episDisponiveis","ngOnInit","get","subscribe","epis","map","epi","epiID","Number","selecionado","cadastrar","episSelecionadosIDs","filter","usuario","nome","telefone","senha","cpf","cargo","episId","console","log","post","next","data","navigate","error","erro","toggleEpiSelecionado","id","parseInt","undefined","index","findIndex","getEpiSelecionado","find"],"sources":["C:\\Users\\Pichau\\Desktop\\v2\\Projeto-Eplist\\FRONT\\src\\app\\pages\\Usuario\\usuario-cadastrar\\usuario-cadastrar\\usuario-cadastrar.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Epi } from 'src/app/models/epi.model';\n\n@Component({\n  selector: 'app-usuario-cadastrar',\n  templateUrl: './usuario-cadastrar.component.html',\n  styleUrls: ['./usuario-cadastrar.component.css']\n})\n\ne: string;\n  email!: strixport class UsuarioCadastrarComponent {\n  nome!ng;\n  telefone!: string;\n  senha!: string;\n  cpf!: string;\n  cargo!: string;\n  episSelecionados: { epiID: number, selecionado: boolean }[] = [];\n  episDisponiveis: Epi[] = [];\n\n  constructor(private client: HttpClient, private router: Router) {}\n\n  ngOnInit(): void {\n    // Busque a lista de EPIS disponíveis\n    this.client.get<Epi[]>(\"https://localhost:7144/EpiList/EPI/listar\").subscribe((epis: Epi[]) => {\n      this.episDisponiveis = epis;\n      // Inicialize a variável episSelecionados para cada EPI\n      this.episSelecionados = epis.map((epi) => ({\n        epiID: Number(epi.epiID), // Converte para número\n        selecionado: false,\n      }));\n    });\n  }\n  \n\n  cadastrar(): void {\n    // Filtrar os EPIS selecionados\n    const episSelecionadosIDs = this.episSelecionados\n      .filter((epi) => epi.selecionado)\n      .map((epi) => epi.epiID);\n\n    const usuario = {\n      nome: this.nome,\n      email: this.email,\n      telefone: this.telefone,\n      senha: this.senha,\n      cpf: this.cpf,\n      cargo: this.cargo,\n      episId: episSelecionadosIDs,\n    };\n    console.log(usuario);\n\n    this.client.post<any>('https://localhost:7144/EpiList/Usuario/cadastrar', usuario).subscribe({\n      next: (data) => {\n        console.log(data);\n        this.router.navigate(['pages/Usuario/listar']);\n      },\n      error: (erro) => {\n        console.log(erro);\n      },\n    });\n  }\n  toggleEpiSelecionado(epiID: string | undefined) {\n    // Certifique-se de que epiID seja um número\n    const id = epiID ? parseInt(epiID, 10) : undefined;\n  \n    if (id !== undefined) {\n      const index = this.episSelecionados.findIndex(e => e.epiID === id);\n      if (index !== -1) {\n        this.episSelecionados[index].selecionado = !this.episSelecionados[index].selecionado;\n      }\n    }\n  }\n  \n  \n  getEpiSelecionado(epiID: string | number | undefined): boolean {\n    if (typeof epiID === 'number' || typeof epiID === 'string') {\n      const id = typeof epiID === 'string' ? parseInt(epiID, 10) : epiID;\n      const epi = this.episSelecionados.find(e => e.epiID === id);\n      return epi ? epi.selecionado : false;\n    } else {\n      return false; // Ou outra lógica adequada caso epiID seja undefined\n    }\n  }\n  \n  \n  \n  \n  \n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}