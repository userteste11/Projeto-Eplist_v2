{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class UnidadeCadastrarComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.usuarios = [];\n  }\n  ngOnInit() {\n    this.usuarioService.listarUsuarios().subscribe(usuarios => {\n      this.usuarios = usuarios;\n    });\n    this.unidadeForm = this.fb.group({\n      nome: ['', Validators.required],\n      usuariosId: this.fb.array([], Validators.required)\n    });\n  }\n  adicionarUsuario(cargo) {\n    const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n    const usuariosIdControl = this.unidadeForm.get('usuariosId');\n    for (const usuario of selectedUsuarios) {\n      usuariosIdControl.push(this.fb.control(usuario.id));\n    }\n  }\n  cadastrarUnidade() {\n    // Enviar os dados do formulário para o servidor\n    console.log(this.unidadeForm.value);\n    // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n  }\n  static #_ = this.ɵfac = function UnidadeCadastrarComponent_Factory(t) {\n    return new (t || UnidadeCadastrarComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UnidadeCadastrarComponent,\n    selectors: [[\"app-unidade-cadastrar\"]],\n    decls: 2,\n    vars: 0,\n    template: function UnidadeCadastrarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"unidade-cadastrar works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["UnidadeCadastrarComponent","constructor","fb","usuarios","ngOnInit","usuarioService","listarUsuarios","subscribe","unidadeForm","group","nome","Validators","required","usuariosId","array","adicionarUsuario","cargo","selectedUsuarios","filter","usuario","usuariosIdControl","get","push","control","id","cadastrarUnidade","console","log","value","_","i0","ɵɵdirectiveInject","i1","FormBuilder","_2","selectors","decls","vars","template","UnidadeCadastrarComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\Pichau\\Desktop\\v2\\Projeto-Eplist\\FRONT\\src\\app\\pages\\Unidade\\unidade-cadastrar\\unidade-cadastrar.component.ts","C:\\Users\\Pichau\\Desktop\\v2\\Projeto-Eplist\\FRONT\\src\\app\\pages\\Unidade\\unidade-cadastrar\\unidade-cadastrar.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-unidade-cadastrar',\n  templateUrl: './unidade-cadastrar.component.html',\n  styleUrls: ['./unidade-cadastrar.component.css']\n})\nexport class UnidadeCadastrarComponent {\n  unidadeForm: FormGroup;\n  usuarios: Usuario[] = [];\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.usuarioService.listarUsuarios().subscribe(usuarios => {\n      this.usuarios = usuarios;\n    });\n\n    this.unidadeForm = this.fb.group({\n      nome: ['', Validators.required],\n      usuariosId: this.fb.array([], Validators.required)\n    });\n  }\n\n  adicionarUsuario(cargo: string) {\n    const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n    const usuariosIdControl = this.unidadeForm.get('usuariosId');\n    for (const usuario of selectedUsuarios) {\n      usuariosIdControl.push(this.fb.control(usuario.id));\n    }\n  }\n\n  cadastrarUnidade() {\n    // Enviar os dados do formulário para o servidor\n    console.log(this.unidadeForm.value);\n    // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n  }\n}\n","<p>unidade-cadastrar works!</p>\n"],"mappings":";;AAQA,OAAM,MAAOA,yBAAyB;EAIpCC,YAAoBC,EAAe;IAAf,KAAAA,EAAE,GAAFA,EAAE;IAFtB,KAAAC,QAAQ,GAAc,EAAE;EAEc;EAEtCC,QAAQA,CAAA;IACN,IAAI,CAACC,cAAc,CAACC,cAAc,EAAE,CAACC,SAAS,CAACJ,QAAQ,IAAG;MACxD,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC1B,CAAC,CAAC;IAEF,IAAI,CAACK,WAAW,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MAC/BC,IAAI,EAAE,CAAC,EAAE,EAAEC,UAAU,CAACC,QAAQ,CAAC;MAC/BC,UAAU,EAAE,IAAI,CAACX,EAAE,CAACY,KAAK,CAAC,EAAE,EAAEH,UAAU,CAACC,QAAQ;KAClD,CAAC;EACJ;EAEAG,gBAAgBA,CAACC,KAAa;IAC5B,MAAMC,gBAAgB,GAAG,IAAI,CAACd,QAAQ,CAACe,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACH,KAAK,KAAKA,KAAK,CAAC;IACjF,MAAMI,iBAAiB,GAAG,IAAI,CAACZ,WAAW,CAACa,GAAG,CAAC,YAAY,CAAC;IAC5D,KAAK,MAAMF,OAAO,IAAIF,gBAAgB,EAAE;MACtCG,iBAAiB,CAACE,IAAI,CAAC,IAAI,CAACpB,EAAE,CAACqB,OAAO,CAACJ,OAAO,CAACK,EAAE,CAAC,CAAC;;EAEvD;EAEAC,gBAAgBA,CAAA;IACd;IACAC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACnB,WAAW,CAACoB,KAAK,CAAC;IACnC;EACF;EAAC,QAAAC,CAAA,G;qBA7BU7B,yBAAyB,EAAA8B,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAzBlC,yBAAyB;IAAAmC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,mCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCRtCV,EAAA,CAAAY,cAAA,QAAG;QAAAZ,EAAA,CAAAa,MAAA,+BAAwB;QAAAb,EAAA,CAAAc,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}