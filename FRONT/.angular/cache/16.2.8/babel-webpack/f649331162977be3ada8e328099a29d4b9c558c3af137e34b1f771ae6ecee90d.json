{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction UnidadeCadastrarComponent_label_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"label\");\n  }\n}\nfunction UnidadeCadastrarComponent_label_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"label\");\n  }\n}\nexport class UnidadeCadastrarComponent {\n  constructor(fb, client, router) {\n    this.fb = fb;\n    this.client = client;\n    this.router = router;\n    this.usuarios = [];\n  }\n  ngOnInit() {\n    this.client.get(\"https://localhost:7144/EpiList/Usuario/listar\").subscribe({\n      next: usuario => {\n        this.usuarios = usuario;\n        console.table(usuario);\n      },\n      error: erro => {\n        console.log(erro);\n      }\n    });\n    this.unidadeForm = this.fb.group({\n      nome: ['', Validators.required],\n      usuariosId: this.fb.array([]) // Defina usuariosId como um FormArray\n    });\n  }\n\n  adicionarUsuario(cargo) {\n    const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n    const usuariosIdControl = this.unidadeForm.get('usuariosId'); // Adicionado conversão para FormArray\n    if (usuariosIdControl) {\n      for (const usuario of selectedUsuarios) {\n        usuariosIdControl.push(this.fb.control(usuario.usuarioID));\n      }\n    }\n  }\n  cadastrarUnidade() {\n    console.log(this.unidadeForm.value);\n    // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n  }\n  static #_ = this.ɵfac = function UnidadeCadastrarComponent_Factory(t) {\n    return new (t || UnidadeCadastrarComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UnidadeCadastrarComponent,\n    selectors: [[\"app-unidade-cadastrar\"]],\n    decls: 22,\n    vars: 3,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"nome\"], [\"type\", \"text\", \"id\", \"nome\", \"formControlName\", \"nome\"], [\"type\", \"button\", 3, \"click\"], [\"formArrayName\", \"usuariosId\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\"]],\n    template: function UnidadeCadastrarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"unidade-cadastrar works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function UnidadeCadastrarComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.cadastrarUnidade();\n        });\n        i0.ɵɵelementStart(3, \"label\", 1);\n        i0.ɵɵtext(4, \"Nome da Unidade:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 2)(6, \"br\");\n        i0.ɵɵelementStart(7, \"label\");\n        i0.ɵɵtext(8, \"Selecione os Usu\\u00E1rios:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"br\");\n        i0.ɵɵelementStart(10, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function UnidadeCadastrarComponent_Template_button_click_10_listener() {\n          return ctx.adicionarUsuario(\"gestor\");\n        });\n        i0.ɵɵtext(11, \"Adicionar Gestor\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function UnidadeCadastrarComponent_Template_button_click_12_listener() {\n          return ctx.adicionarUsuario(\"tecnico\");\n        });\n        i0.ɵɵtext(13, \"Adicionar T\\u00E9cnico\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"br\");\n        i0.ɵɵelementStart(15, \"div\", 4);\n        i0.ɵɵtemplate(16, UnidadeCadastrarComponent_label_16_Template, 1, 0, \"label\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 4);\n        i0.ɵɵtemplate(18, UnidadeCadastrarComponent_label_18_Template, 1, 0, \"label\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"br\");\n        i0.ɵɵelementStart(20, \"button\", 6);\n        i0.ɵɵtext(21, \"Cadastrar Unidade\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        let tmp_2_0;\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.unidadeForm);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngForOf\", ctx.unidadeForm.get(\"usuariosId\").controls);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", (tmp_2_0 = ctx.unidadeForm.get(\"usuariosId\")) == null ? null : tmp_2_0.value);\n      }\n    },\n    dependencies: [i4.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormArrayName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelement","UnidadeCadastrarComponent","constructor","fb","client","router","usuarios","ngOnInit","get","subscribe","next","usuario","console","table","error","erro","log","unidadeForm","group","nome","required","usuariosId","array","adicionarUsuario","cargo","selectedUsuarios","filter","usuariosIdControl","push","control","usuarioID","cadastrarUnidade","value","_","ɵɵdirectiveInject","i1","FormBuilder","i2","HttpClient","i3","Router","_2","selectors","decls","vars","consts","template","UnidadeCadastrarComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","UnidadeCadastrarComponent_Template_form_ngSubmit_2_listener","UnidadeCadastrarComponent_Template_button_click_10_listener","UnidadeCadastrarComponent_Template_button_click_12_listener","ɵɵtemplate","UnidadeCadastrarComponent_label_16_Template","UnidadeCadastrarComponent_label_18_Template","ɵɵadvance","ɵɵproperty","controls","tmp_2_0"],"sources":["C:\\Users\\Pichau\\Desktop\\v2\\Projeto-Eplist\\FRONT\\src\\app\\pages\\Unidade\\unidade-cadastrar\\unidade-cadastrar.component.ts","C:\\Users\\Pichau\\Desktop\\v2\\Projeto-Eplist\\FRONT\\src\\app\\pages\\Unidade\\unidade-cadastrar\\unidade-cadastrar.component.html"],"sourcesContent":["// import { HttpClient } from '@angular/common/http';\n// import { Component } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';\n// import { Router } from '@angular/router';\n// import { Usuario } from 'src/app/models/usuario.model';\n\n// @Component({\n//   selector: 'app-unidade-cadastrar',\n//   templateUrl: './unidade-cadastrar.component.html',\n//   styleUrls: ['./unidade-cadastrar.component.css']\n// })\n// export class UnidadeCadastrarComponent {\n//   unidadeForm!: FormGroup;\n//   usuarios: Usuario[] = [];\n\n//   constructor(private fb: FormBuilder, private client: HttpClient,private router: Router) {}\n\n//   ngOnInit() {\n//     this.client.get<Usuario[]>(\"https://localhost:7144/EpiList/Usuario/listar\")\n//       .subscribe({\n//         //Requisição com sucesso\n//         next: (usuario) => {\n//           this.usuarios = usuario;\n//           console.table(usuario);\n//         }, \n//         //Requisição com erro\n//         error: (erro) => {\n//           console.log(erro);\n//         }\n//       })\n    \n\n//     this.unidadeForm = this.fb.group({\n//       nome: ['', Validators.required],\n//       usuariosId: this.fb.array([], Validators.required)\n//     });\n//   }\n\n//   adicionarUsuario(cargo: string) {\n//     const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n//     const usuariosIdControl = this.unidadeForm.get('usuariosId');\n  \n//     if (usuariosIdControl) { // Verifique se usuariosIdControl não é nulo\n//       for (const usuario of selectedUsuarios) {\n//         usuariosIdControl.push(this.fb.control(usuario.id));\n//       }\n//     }\n//   }\n  \n\n//   cadastrarUnidade() {\n//     // Enviar os dados do formulário para o servidor\n//     console.log(this.unidadeForm.value);\n//     // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n//   }\n// }\nimport { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Usuario } from 'src/app/models/usuario.model';\n\n@Component({\n  selector: 'app-unidade-cadastrar',\n  templateUrl: './unidade-cadastrar.component.html',\n  styleUrls: ['./unidade-cadastrar.component.css']\n})\nexport class UnidadeCadastrarComponent implements OnInit {\n  unidadeForm!: FormGroup;\n  usuarios: Usuario[] = [];\n\n  constructor(private fb: FormBuilder, private client: HttpClient, private router: Router) {}\n\n  ngOnInit(): void { // Corrigido: Adicionado ': void'\n    this.client.get<Usuario[]>(\"https://localhost:7144/EpiList/Usuario/listar\")\n      .subscribe({\n        next: (usuario) => {\n          this.usuarios = usuario;\n          console.table(usuario);\n        },\n        error: (erro) => {\n          console.log(erro);\n        }\n      });\n\n    this.unidadeForm = this.fb.group({\n      nome: ['', Validators.required],\n      usuariosId: this.fb.array([]) as FormArray, // Defina usuariosId como um FormArray\n    });\n  }\n\n  adicionarUsuario(cargo: string) {\n    const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n    const usuariosIdControl = this.unidadeForm.get('usuariosId') as FormArray; // Adicionado conversão para FormArray\n\n    if (usuariosIdControl) {\n      for (const usuario of selectedUsuarios) {\n        usuariosIdControl.push(this.fb.control(usuario.usuarioID));\n      }\n    }\n  }\n\n  cadastrarUnidade() {\n    console.log(this.unidadeForm.value);\n    // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n  }\n}\n\n","<p>unidade-cadastrar works!</p>\n<form [formGroup]=\"unidadeForm\" (ngSubmit)=\"cadastrarUnidade()\">\n    <label for=\"nome\">Nome da Unidade:</label>\n    <input type=\"text\" id=\"nome\" formControlName=\"nome\">\n    <br>\n    <label>Selecione os Usuários:</label>\n    <br>\n    <button type=\"button\" (click)=\"adicionarUsuario('gestor')\">Adicionar Gestor</button>\n    <button type=\"button\" (click)=\"adicionarUsuario('tecnico')\">Adicionar Técnico</button>\n    <br>\n    <div formArrayName=\"usuariosId\">\n        <label *ngFor=\"let usuarioControl of unidadeForm.get('usuariosId').controls; let i = index\">\n          \n        </label>\n    </div>\n    <div formArrayName=\"usuariosId\">\n        <label *ngFor=\"let usuario of unidadeForm.get('usuariosId')?.value; let i = index\">\n          \n        </label>\n      </div>\n      \n      \n      \n      \n    <br>\n    <button type=\"submit\">Cadastrar Unidade</button>\n  </form>\n  \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}