{"ast":null,"code":"// import { HttpClient } from '@angular/common/http';\n// import { Component } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';\n// import { Router } from '@angular/router';\n// import { Usuario } from 'src/app/models/usuario.model';\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let UnidadeCadastrarComponent = class UnidadeCadastrarComponent {\n  constructor(fb, client, router) {\n    this.fb = fb;\n    this.client = client;\n    this.router = router;\n    this.usuarios = [];\n  }\n  ngOnInit() {\n    this.client.get(\"https://localhost:7144/EpiList/Usuario/listar\").subscribe({\n      next: usuario => {\n        this.usuarios = usuario;\n        console.table(usuario);\n      },\n      error: erro => {\n        console.log(erro);\n      }\n    });\n    this.unidadeForm = this.fb.group({\n      nome: ['', Validators.required],\n      usuariosId: this.fb.array([]) // Defina usuariosId como um FormArray\n    });\n  }\n\n  adicionarUsuario(cargo) {\n    const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n    const usuariosIdControl = this.unidadeForm.get('usuariosId'); // Adicionado conversão para FormArray\n    if (usuariosIdControl) {\n      for (const usuario of selectedUsuarios) {\n        usuariosIdControl.push(this.fb.control(usuario.usuarioID));\n      }\n    }\n  }\n  cadastrarUnidade() {\n    console.log(this.unidadeForm.value);\n    // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n  }\n};\n\nUnidadeCadastrarComponent = __decorate([Component({\n  selector: 'app-unidade-cadastrar',\n  templateUrl: './unidade-cadastrar.component.html',\n  styleUrls: ['./unidade-cadastrar.component.css']\n})], UnidadeCadastrarComponent);","map":{"version":3,"names":["Component","Validators","UnidadeCadastrarComponent","constructor","fb","client","router","usuarios","ngOnInit","get","subscribe","next","usuario","console","table","error","erro","log","unidadeForm","group","nome","required","usuariosId","array","adicionarUsuario","cargo","selectedUsuarios","filter","usuariosIdControl","push","control","usuarioID","cadastrarUnidade","value","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Pichau\\Desktop\\v2\\Projeto-Eplist\\FRONT\\src\\app\\pages\\Unidade\\unidade-cadastrar\\unidade-cadastrar.component.ts"],"sourcesContent":["// import { HttpClient } from '@angular/common/http';\n// import { Component } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';\n// import { Router } from '@angular/router';\n// import { Usuario } from 'src/app/models/usuario.model';\n\n// @Component({\n//   selector: 'app-unidade-cadastrar',\n//   templateUrl: './unidade-cadastrar.component.html',\n//   styleUrls: ['./unidade-cadastrar.component.css']\n// })\n// export class UnidadeCadastrarComponent {\n//   unidadeForm!: FormGroup;\n//   usuarios: Usuario[] = [];\n\n//   constructor(private fb: FormBuilder, private client: HttpClient,private router: Router) {}\n\n//   ngOnInit() {\n//     this.client.get<Usuario[]>(\"https://localhost:7144/EpiList/Usuario/listar\")\n//       .subscribe({\n//         //Requisição com sucesso\n//         next: (usuario) => {\n//           this.usuarios = usuario;\n//           console.table(usuario);\n//         }, \n//         //Requisição com erro\n//         error: (erro) => {\n//           console.log(erro);\n//         }\n//       })\n    \n\n//     this.unidadeForm = this.fb.group({\n//       nome: ['', Validators.required],\n//       usuariosId: this.fb.array([], Validators.required)\n//     });\n//   }\n\n//   adicionarUsuario(cargo: string) {\n//     const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n//     const usuariosIdControl = this.unidadeForm.get('usuariosId');\n  \n//     if (usuariosIdControl) { // Verifique se usuariosIdControl não é nulo\n//       for (const usuario of selectedUsuarios) {\n//         usuariosIdControl.push(this.fb.control(usuario.id));\n//       }\n//     }\n//   }\n  \n\n//   cadastrarUnidade() {\n//     // Enviar os dados do formulário para o servidor\n//     console.log(this.unidadeForm.value);\n//     // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n//   }\n// }\nimport { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Usuario } from 'src/app/models/usuario.model';\n\n@Component({\n  selector: 'app-unidade-cadastrar',\n  templateUrl: './unidade-cadastrar.component.html',\n  styleUrls: ['./unidade-cadastrar.component.css']\n})\nexport class UnidadeCadastrarComponent implements OnInit {\n  unidadeForm!: FormGroup;\n  usuarios: Usuario[] = [];\n\n  constructor(private fb: FormBuilder, private client: HttpClient, private router: Router) {}\n\n  ngOnInit(): void { // Corrigido: Adicionado ': void'\n    this.client.get<Usuario[]>(\"https://localhost:7144/EpiList/Usuario/listar\")\n      .subscribe({\n        next: (usuario) => {\n          this.usuarios = usuario;\n          console.table(usuario);\n        },\n        error: (erro) => {\n          console.log(erro);\n        }\n      });\n\n    this.unidadeForm = this.fb.group({\n      nome: ['', Validators.required],\n      usuariosId: this.fb.array([]) as FormArray, // Defina usuariosId como um FormArray\n    });\n  }\n\n  adicionarUsuario(cargo: string) {\n    const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n    const usuariosIdControl = this.unidadeForm.get('usuariosId') as FormArray; // Adicionado conversão para FormArray\n\n    if (usuariosIdControl) {\n      for (const usuario of selectedUsuarios) {\n        usuariosIdControl.push(this.fb.control(usuario.usuarioID));\n      }\n    }\n  }\n\n  cadastrarUnidade() {\n    console.log(this.unidadeForm.value);\n    // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n  }\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAqDA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAmB,gBAAgB;AASvE,WAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAIpCC,YAAoBC,EAAe,EAAUC,MAAkB,EAAUC,MAAc;IAAnE,KAAAF,EAAE,GAAFA,EAAE;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAF/E,KAAAC,QAAQ,GAAc,EAAE;EAEkE;EAE1FC,QAAQA,CAAA;IACN,IAAI,CAACH,MAAM,CAACI,GAAG,CAAY,+CAA+C,CAAC,CACxEC,SAAS,CAAC;MACTC,IAAI,EAAGC,OAAO,IAAI;QAChB,IAAI,CAACL,QAAQ,GAAGK,OAAO;QACvBC,OAAO,CAACC,KAAK,CAACF,OAAO,CAAC;MACxB,CAAC;MACDG,KAAK,EAAGC,IAAI,IAAI;QACdH,OAAO,CAACI,GAAG,CAACD,IAAI,CAAC;MACnB;KACD,CAAC;IAEJ,IAAI,CAACE,WAAW,GAAG,IAAI,CAACd,EAAE,CAACe,KAAK,CAAC;MAC/BC,IAAI,EAAE,CAAC,EAAE,EAAEnB,UAAU,CAACoB,QAAQ,CAAC;MAC/BC,UAAU,EAAE,IAAI,CAAClB,EAAE,CAACmB,KAAK,CAAC,EAAE,CAAc,CAAE;KAC7C,CAAC;EACJ;;EAEAC,gBAAgBA,CAACC,KAAa;IAC5B,MAAMC,gBAAgB,GAAG,IAAI,CAACnB,QAAQ,CAACoB,MAAM,CAACf,OAAO,IAAIA,OAAO,CAACa,KAAK,KAAKA,KAAK,CAAC;IACjF,MAAMG,iBAAiB,GAAG,IAAI,CAACV,WAAW,CAACT,GAAG,CAAC,YAAY,CAAc,CAAC,CAAC;IAE3E,IAAImB,iBAAiB,EAAE;MACrB,KAAK,MAAMhB,OAAO,IAAIc,gBAAgB,EAAE;QACtCE,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAACzB,EAAE,CAAC0B,OAAO,CAAClB,OAAO,CAACmB,SAAS,CAAC,CAAC;;;EAGhE;EAEAC,gBAAgBA,CAAA;IACdnB,OAAO,CAACI,GAAG,CAAC,IAAI,CAACC,WAAW,CAACe,KAAK,CAAC;IACnC;EACF;CACD;;AAvCY/B,yBAAyB,GAAAgC,UAAA,EALrClC,SAAS,CAAC;EACTmC,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,C,EACWnC,yBAAyB,CAuCrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}