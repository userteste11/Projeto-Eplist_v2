{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction UnidadeCadastrarComponent_label_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\");\n    i0.ɵɵelement(1, \"input\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const usuario_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", usuario_r1.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", usuario_r1.value, \" \");\n  }\n}\nexport class UnidadeCadastrarComponent {\n  constructor(fb, client, router) {\n    this.fb = fb;\n    this.client = client;\n    this.router = router;\n    this.usuarios = [];\n  }\n  ngOnInit() {\n    this.client.get(\"https://localhost:7144/EpiList/Usuario/listar\").subscribe({\n      //Requisição com sucesso\n      next: usuario => {\n        this.usuarios = usuario;\n        console.table(usuario);\n      },\n      //Requisição com erro\n      error: erro => {\n        console.log(erro);\n      }\n    });\n    this.unidadeForm = this.fb.group({\n      nome: ['', Validators.required],\n      usuariosId: this.fb.array([], Validators.required)\n    });\n  }\n  adicionarUsuario(cargo) {\n    const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n    const usuariosIdControl = this.unidadeForm.get('usuariosId');\n    if (usuariosIdControl) {\n      // Verifique se usuariosIdControl não é nulo\n      for (const usuario of selectedUsuarios) {\n        usuariosIdControl.push(this.fb.control(usuario.id));\n      }\n    }\n  }\n  cadastrarUnidade() {\n    // Enviar os dados do formulário para o servidor\n    console.log(this.unidadeForm.value);\n    // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n  }\n  static #_ = this.ɵfac = function UnidadeCadastrarComponent_Factory(t) {\n    return new (t || UnidadeCadastrarComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UnidadeCadastrarComponent,\n    selectors: [[\"app-unidade-cadastrar\"]],\n    decls: 20,\n    vars: 2,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"nome\"], [\"type\", \"text\", \"id\", \"nome\", \"formControlName\", \"nome\"], [\"type\", \"button\", 3, \"click\"], [\"formArrayName\", \"usuariosId\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\"], [\"type\", \"checkbox\", 3, \"formControlName\"]],\n    template: function UnidadeCadastrarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"unidade-cadastrar works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function UnidadeCadastrarComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.cadastrarUnidade();\n        });\n        i0.ɵɵelementStart(3, \"label\", 1);\n        i0.ɵɵtext(4, \"Nome da Unidade:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 2)(6, \"br\");\n        i0.ɵɵelementStart(7, \"label\");\n        i0.ɵɵtext(8, \"Selecione os Usu\\u00E1rios:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"br\");\n        i0.ɵɵelementStart(10, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function UnidadeCadastrarComponent_Template_button_click_10_listener() {\n          return ctx.adicionarUsuario(\"gestor\");\n        });\n        i0.ɵɵtext(11, \"Adicionar Gestor\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function UnidadeCadastrarComponent_Template_button_click_12_listener() {\n          return ctx.adicionarUsuario(\"tecnico\");\n        });\n        i0.ɵɵtext(13, \"Adicionar T\\u00E9cnico\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"br\");\n        i0.ɵɵelementStart(15, \"div\", 4);\n        i0.ɵɵtemplate(16, UnidadeCadastrarComponent_label_16_Template, 3, 2, \"label\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"br\");\n        i0.ɵɵelementStart(18, \"button\", 6);\n        i0.ɵɵtext(19, \"Cadastrar Unidade\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.unidadeForm);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngForOf\", ctx.unidadeForm.get(\"usuariosId\").controls);\n      }\n    },\n    dependencies: [i4.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.CheckboxControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormArrayName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","usuario_r1","value","ɵɵtextInterpolate1","UnidadeCadastrarComponent","constructor","fb","client","router","usuarios","ngOnInit","get","subscribe","next","usuario","console","table","error","erro","log","unidadeForm","group","nome","required","usuariosId","array","adicionarUsuario","cargo","selectedUsuarios","filter","usuariosIdControl","push","control","id","cadastrarUnidade","_","ɵɵdirectiveInject","i1","FormBuilder","i2","HttpClient","i3","Router","_2","selectors","decls","vars","consts","template","UnidadeCadastrarComponent_Template","rf","ctx","ɵɵlistener","UnidadeCadastrarComponent_Template_form_ngSubmit_2_listener","UnidadeCadastrarComponent_Template_button_click_10_listener","UnidadeCadastrarComponent_Template_button_click_12_listener","ɵɵtemplate","UnidadeCadastrarComponent_label_16_Template","controls"],"sources":["C:\\Users\\Pichau\\Desktop\\v2\\Projeto-Eplist\\FRONT\\src\\app\\pages\\Unidade\\unidade-cadastrar\\unidade-cadastrar.component.ts","C:\\Users\\Pichau\\Desktop\\v2\\Projeto-Eplist\\FRONT\\src\\app\\pages\\Unidade\\unidade-cadastrar\\unidade-cadastrar.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormArray  } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Usuario } from 'src/app/models/usuario.model';\n\n@Component({\n  selector: 'app-unidade-cadastrar',\n  templateUrl: './unidade-cadastrar.component.html',\n  styleUrls: ['./unidade-cadastrar.component.css']\n})\nexport class UnidadeCadastrarComponent {\n  unidadeForm!: FormGroup;\n  usuarios: Usuario[] = [];\n\n  constructor(private fb: FormBuilder, private client: HttpClient,private router: Router) {}\n\n  ngOnInit() {\n    this.client.get<Usuario[]>(\"https://localhost:7144/EpiList/Usuario/listar\")\n      .subscribe({\n        //Requisição com sucesso\n        next: (usuario) => {\n          this.usuarios = usuario;\n          console.table(usuario);\n        }, \n        //Requisição com erro\n        error: (erro) => {\n          console.log(erro);\n        }\n      })\n    \n\n    this.unidadeForm = this.fb.group({\n      nome: ['', Validators.required],\n      usuariosId: this.fb.array([], Validators.required)\n    });\n  }\n\n  adicionarUsuario(cargo: string) {\n    const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n    const usuariosIdControl = this.unidadeForm.get('usuariosId');\n  \n    if (usuariosIdControl) { // Verifique se usuariosIdControl não é nulo\n      for (const usuario of selectedUsuarios) {\n        usuariosIdControl.push(this.fb.control(usuario.id));\n      }\n    }\n  }\n  \n\n  cadastrarUnidade() {\n    // Enviar os dados do formulário para o servidor\n    console.log(this.unidadeForm.value);\n    // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n  }\n}\n","<p>unidade-cadastrar works!</p>\n<form [formGroup]=\"unidadeForm\" (ngSubmit)=\"cadastrarUnidade()\">\n    <label for=\"nome\">Nome da Unidade:</label>\n    <input type=\"text\" id=\"nome\" formControlName=\"nome\">\n    <br>\n    <label>Selecione os Usuários:</label>\n    <br>\n    <button type=\"button\" (click)=\"adicionarUsuario('gestor')\">Adicionar Gestor</button>\n    <button type=\"button\" (click)=\"adicionarUsuario('tecnico')\">Adicionar Técnico</button>\n    <br>\n    <div formArrayName=\"usuariosId\">\n      <label *ngFor=\"let usuario of unidadeForm.get('usuariosId').controls\">\n        <input type=\"checkbox\" [formControlName]=\"usuario.value\"> {{ usuario.value }}\n      </label>\n    </div>\n    <br>\n    <button type=\"submit\">Cadastrar Unidade</button>\n  </form>\n  \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}