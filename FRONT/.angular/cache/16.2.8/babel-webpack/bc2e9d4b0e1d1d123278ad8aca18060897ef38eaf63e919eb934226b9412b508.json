{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let UnidadeCadastrarComponent = class UnidadeCadastrarComponent {\n  constructor(fb, client, router) {\n    this.fb = fb;\n    this.client = client;\n    this.router = router;\n    this.usuarios = [];\n  }\n  ngOnInit() {\n    this.client.get(\"https://localhost:7144/EpiList/Usuario/listar\").subscribe({\n      //Requisição com sucesso\n      next: usuario => {\n        this.usuario = usuario;\n        console.table(usuario);\n      },\n      //Requisição com erro\n      error: erro => {\n        console.log(erro);\n      }\n    });\n  }\n};\nUnidadeCadastrarComponent = __decorate([Component({\n  selector: 'app-unidade-cadastrar',\n  templateUrl: './unidade-cadastrar.component.html',\n  styleUrls: ['./unidade-cadastrar.component.css']\n})], UnidadeCadastrarComponent);\nthis.unidadeForm = this.fb.group({\n  nome: ['', Validators.required],\n  usuariosId: this.fb.array([], Validators.required)\n});\nadicionarUsuario(cargo, string);\n{\n  const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n  const usuariosIdControl = this.unidadeForm.get('usuariosId');\n  for (const usuario of selectedUsuarios) {\n    usuariosIdControl.push(this.fb.control(usuario.id));\n  }\n}\ncadastrarUnidade();\n{\n  // Enviar os dados do formulário para o servidor\n  console.log(this.unidadeForm.value);\n  // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n}","map":{"version":3,"names":["Component","UnidadeCadastrarComponent","constructor","fb","client","router","usuarios","ngOnInit","get","subscribe","next","usuario","console","table","error","erro","log","__decorate","selector","templateUrl","styleUrls","unidadeForm","group","nome","Validators","required","usuariosId","array","adicionarUsuario","cargo","string","selectedUsuarios","filter","usuariosIdControl","push","control","id","cadastrarUnidade","value"],"sources":["C:\\Users\\Pichau\\Desktop\\v2\\Projeto-Eplist\\FRONT\\src\\app\\pages\\Unidade\\unidade-cadastrar\\unidade-cadastrar.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Usuario } from 'src/app/models/usuario.model';\n\n@Component({\n  selector: 'app-unidade-cadastrar',\n  templateUrl: './unidade-cadastrar.component.html',\n  styleUrls: ['./unidade-cadastrar.component.css']\n})\nexport class UnidadeCadastrarComponent {\n  unidadeForm: FormGroup;\n  usuarios: Usuario[] = [];\n\n  constructor(private fb: FormBuilder, private client: HttpClient,private router: Router) {}\n\n  ngOnInit() {\n    this.client.get<Usuario[]>(\"https://localhost:7144/EpiList/Usuario/listar\")\n      .subscribe({\n        //Requisição com sucesso\n        next: (usuario) => {\n          this.usuario = usuario;\n          console.table(usuario);\n        }, \n        //Requisição com erro\n        error: (erro) => {\n          console.log(erro);\n        }\n      })\n    });\n\n    this.unidadeForm = this.fb.group({\n      nome: ['', Validators.required],\n      usuariosId: this.fb.array([], Validators.required)\n    });\n  }\n\n  adicionarUsuario(cargo: string) {\n    const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n    const usuariosIdControl = this.unidadeForm.get('usuariosId');\n    for (const usuario of selectedUsuarios) {\n      usuariosIdControl.push(this.fb.control(usuario.id));\n    }\n  }\n\n  cadastrarUnidade() {\n    // Enviar os dados do formulário para o servidor\n    console.log(this.unidadeForm.value);\n    // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n  }\n}\n"],"mappings":";AACA,SAASA,SAAS,QAAQ,eAAe;AASlC,WAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAIpCC,YAAoBC,EAAe,EAAUC,MAAkB,EAASC,MAAc;IAAlE,KAAAF,EAAE,GAAFA,EAAE;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAAqB,KAAAC,MAAM,GAANA,MAAM;IAF9E,KAAAC,QAAQ,GAAc,EAAE;EAEiE;EAEzFC,QAAQA,CAAA;IACN,IAAI,CAACH,MAAM,CAACI,GAAG,CAAY,+CAA+C,CAAC,CACxEC,SAAS,CAAC;MACT;MACAC,IAAI,EAAGC,OAAO,IAAI;QAChB,IAAI,CAACA,OAAO,GAAGA,OAAO;QACtBC,OAAO,CAACC,KAAK,CAACF,OAAO,CAAC;MACxB,CAAC;MACD;MACAG,KAAK,EAAGC,IAAI,IAAI;QACdH,OAAO,CAACI,GAAG,CAACD,IAAI,CAAC;MACnB;KACD,CAAC;EACJ;CAAG;AAnBMd,yBAAyB,GAAAgB,UAAA,EALrCjB,SAAS,CAAC;EACTkB,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,C,EACWnB,yBAAyB,CAmB/B;AAEH,IAAI,CAACoB,WAAW,GAAG,IAAI,CAAClB,EAAE,CAACmB,KAAK,CAAC;EAC/BC,IAAI,EAAE,CAAC,EAAE,EAAEC,UAAU,CAACC,QAAQ,CAAC;EAC/BC,UAAU,EAAE,IAAI,CAACvB,EAAE,CAACwB,KAAK,CAAC,EAAE,EAAEH,UAAU,CAACC,QAAQ;CAClD,CAAC;AAGJG,gBAAgB,CAACC,KAAK,EAAEC,MAAM,CAAC;AAAC;EAC9B,MAAMC,gBAAgB,GAAG,IAAI,CAACzB,QAAQ,CAAC0B,MAAM,CAACrB,OAAO,IAAIA,OAAO,CAACkB,KAAK,KAAKA,KAAK,CAAC;EACjF,MAAMI,iBAAiB,GAAG,IAAI,CAACZ,WAAW,CAACb,GAAG,CAAC,YAAY,CAAC;EAC5D,KAAK,MAAMG,OAAO,IAAIoB,gBAAgB,EAAE;IACtCE,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC/B,EAAE,CAACgC,OAAO,CAACxB,OAAO,CAACyB,EAAE,CAAC,CAAC;;;AAIvDC,gBAAgB,EAAE;AAAC;EACjB;EACAzB,OAAO,CAACI,GAAG,CAAC,IAAI,CAACK,WAAW,CAACiB,KAAK,CAAC;EACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}