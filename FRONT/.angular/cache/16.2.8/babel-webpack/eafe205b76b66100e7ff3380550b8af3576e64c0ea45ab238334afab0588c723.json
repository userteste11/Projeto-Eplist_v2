{"ast":null,"code":"\"use strict\";\n\n// import { HttpClient } from '@angular/common/http';\n// import { Component } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';\n// import { Router } from '@angular/router';\n// import { Usuario } from 'src/app/models/usuario.model';\n// @Component({\n//   selector: 'app-unidade-cadastrar',\n//   templateUrl: './unidade-cadastrar.component.html',\n//   styleUrls: ['./unidade-cadastrar.component.css']\n// })\n// export class UnidadeCadastrarComponent {\n//   unidadeForm!: FormGroup;\n//   usuarios: Usuario[] = [];\n//   constructor(private fb: FormBuilder, private client: HttpClient,private router: Router) {}\n//   ngOnInit() {\n//     this.client.get<Usuario[]>(\"https://localhost:7144/EpiList/Usuario/listar\")\n//       .subscribe({\n//         //Requisição com sucesso\n//         next: (usuario) => {\n//           this.usuarios = usuario;\n//           console.table(usuario);\n//         }, \n//         //Requisição com erro\n//         error: (erro) => {\n//           console.log(erro);\n//         }\n//       })\n//     this.unidadeForm = this.fb.group({\n//       nome: ['', Validators.required],\n//       usuariosId: this.fb.array([], Validators.required)\n//     });\n//   }\n//   adicionarUsuario(cargo: string) {\n//     const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n//     const usuariosIdControl = this.unidadeForm.get('usuariosId');\n//     if (usuariosIdControl) { // Verifique se usuariosIdControl não é nulo\n//       for (const usuario of selectedUsuarios) {\n//         usuariosIdControl.push(this.fb.control(usuario.id));\n//       }\n//     }\n//   }\n//   cadastrarUnidade() {\n//     // Enviar os dados do formulário para o servidor\n//     console.log(this.unidadeForm.value);\n//     // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Pichau\\Desktop\\v2\\Projeto-Eplist\\FRONT\\src\\app\\pages\\Unidade\\unidade-cadastrar\\unidade-cadastrar.component.ts"],"sourcesContent":["// import { HttpClient } from '@angular/common/http';\n// import { Component } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';\n// import { Router } from '@angular/router';\n// import { Usuario } from 'src/app/models/usuario.model';\n\n// @Component({\n//   selector: 'app-unidade-cadastrar',\n//   templateUrl: './unidade-cadastrar.component.html',\n//   styleUrls: ['./unidade-cadastrar.component.css']\n// })\n// export class UnidadeCadastrarComponent {\n//   unidadeForm!: FormGroup;\n//   usuarios: Usuario[] = [];\n\n//   constructor(private fb: FormBuilder, private client: HttpClient,private router: Router) {}\n\n//   ngOnInit() {\n//     this.client.get<Usuario[]>(\"https://localhost:7144/EpiList/Usuario/listar\")\n//       .subscribe({\n//         //Requisição com sucesso\n//         next: (usuario) => {\n//           this.usuarios = usuario;\n//           console.table(usuario);\n//         }, \n//         //Requisição com erro\n//         error: (erro) => {\n//           console.log(erro);\n//         }\n//       })\n    \n\n//     this.unidadeForm = this.fb.group({\n//       nome: ['', Validators.required],\n//       usuariosId: this.fb.array([], Validators.required)\n//     });\n//   }\n\n//   adicionarUsuario(cargo: string) {\n//     const selectedUsuarios = this.usuarios.filter(usuario => usuario.cargo === cargo);\n//     const usuariosIdControl = this.unidadeForm.get('usuariosId');\n  \n//     if (usuariosIdControl) { // Verifique se usuariosIdControl não é nulo\n//       for (const usuario of selectedUsuarios) {\n//         usuariosIdControl.push(this.fb.control(usuario.id));\n//       }\n//     }\n//   }\n  \n\n//   cadastrarUnidade() {\n//     // Enviar os dados do formulário para o servidor\n//     console.log(this.unidadeForm.value);\n//     // Você pode usar um serviço para fazer a chamada de API para cadastrar a unidade.\n//   }\n// }\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}